
services:
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    ports:
      - "${JENKINS_PORT:-8080}:8080"
    environment:
      - JENKINS_ADMIN_USER=${JENKINS_ADMIN_USER:-admin}
      - JENKINS_ADMIN_PASS=${JENKINS_ADMIN_PASS:-admin}
      - JAVA_OPTS=-Djenkins.model.Jenkins.contextPath=/jenkins -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
    volumes:
      - jenkins_data:/var/jenkins_home
      - ./jenkins/init.groovy.d:/var/jenkins_home/init.groovy.d
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - sonarqube
    networks:
      - appnetwork

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    restart: always
    ports:
      - "${SONARQUBE_PORT:-9000}:9000"
    environment:
      - sonar.jdbc.url=jdbc:postgresql://postgres:5432/${SONAR_DB_NAME:-sonardb}
      - sonar.jdbc.username=${SONAR_DB_USER:-sonar}
      - sonar.jdbc.password=${SONAR_DB_PASS:-sonar}
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - appnetwork

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${SONAR_DB_USER:-sonar}
      - POSTGRES_PASSWORD=${SONAR_DB_PASS:-sonar}
      - POSTGRES_DB=${SONAR_DB_NAME:-sonardb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appnetwork

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    user: "0:0"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - metrics_data:/prometheus

    networks:
      - appnetwork

  grafana-init:
    image: busybox
    command: chown -R 472:472 /var/lib/grafana
    volumes:
      - metrics_data:/var/lib/grafana
    restart: "no"
    networks:
      - appnetwork

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - grafana-init
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS:-admin}
      
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true

    volumes:
      - metrics_data:/var/lib/grafana
    networks:
      - appnetwork

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - jenkins
      - sonarqube
      - grafana
      - prometheus
    networks:
      - appnetwork

networks:
  appnetwork:
    driver: bridge

volumes:
  jenkins_data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  postgres_data:
  metrics_data:
